#!/bin/bash
#
#  Copyright (c) 2020, The OpenThread Authors.
#  All rights reserved.
#
#  Redistribution and use in source and binary forms, with or without
#  modification, are permitted provided that the following conditions are met:
#  1. Redistributions of source code must retain the above copyright
#     notice, this list of conditions and the following disclaimer.
#  2. Redistributions in binary form must reproduce the above copyright
#     notice, this list of conditions and the following disclaimer in the
#     documentation and/or other materials provided with the distribution.
#  3. Neither the name of the copyright holder nor the
#     names of its contributors may be used to endorse or promote products
#     derived from this software without specific prior written permission.
#
#  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
#  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
#  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
#  ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
#  LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
#  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
#  SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
#  INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
#  CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
#  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
#  POSSIBILITY OF SUCH DAMAGE.
#

###################################################################################################
#
# Utilities
#
###################################################################################################
die()
{
    echo " ** ERROR: $1"
    exit 1
}

available_platforms_load()
{
    cd "$repo_dir"/third_party/infineon/platform

    local folders=""
    mapfile -d '' folders < <(find . -maxdepth 1 -type d -print0 | tr -d './')

    local i=0
    for folder in "${folders[@]}"; do
        if [[ ${#folder} != 0 ]]; then
            IFX_PLATFORMS[i++]="$folder"
        fi
    done

    cd "$current_dir"

    echo "Available Platforms: ${IFX_PLATFORMS[*]}"
}

available_boards_load()
{
    cd "$repo_dir"/third_party/infineon/platform/"$1"/bsp

    local folders=()
    mapfile -d '' folders < <(find . -maxdepth 1 -type d -print0 | tr -d './')

    local i=0
    for folder in "${folders[@]}"; do
        if [[ ${#folder} != 0 ]]; then
            IFX_BOARDS[i++]="$folder"
        fi
    done

    cd "$current_dir"

    echo "Available Boards for $1: ${IFX_BOARDS[*]}"
}

build()
{
    # Create the output folder
    builddir="${OT_CMAKE_BUILD_DIR:-$repo_dir/build/$1}"
    shift

    echo "Output folder: $builddir"

    cmake -GNinja "$@" -S "${repo_dir}" -B "${builddir}"
    cmake --build "${builddir}"
}

main()
{
    # Read target platform.
    local target_platform="$1"

    # Read target board
    shift
    local target_board="$1"

    # Read build options from command line
    shift
    local cmdline_options=("$@")

    # Load general options
    local options=("${OT_OPTIONS[@]}")

    options+=("-DCMAKE_TOOLCHAIN_FILE=src/${target_platform}/arm-none-eabi.cmake")

    echo "Building $target_board ($target_platform)"
    echo "User specified build options: ${cmdline_options[*]}"
    echo "General options: ${options[*]}}"
    build "$target_board" -DOT_BUILD_EXECUTABLES=OFF -DIFX_PLATFORM="$target_platform" -DIFX_BOARD="$target_board" "${options[@]}" "${cmdline_options[@]}"
}

###################################################################################################
#
# Program Start
#
###################################################################################################

set -euxo pipefail

OT_OPTIONS=(
    "-DCMAKE_BUILD_TYPE=Debug"
    "-DI15DOT4_IEEE_EUI64="
    "-DOT_APP_NCP=OFF"
    "-DOT_APP_RCP=OFF"
    "-DOT_BORDER_ROUTER=ON"
    "-DOT_COAP=ON"
    "-DOT_COAPS=ON"
    "-DOT_COMMISSIONER=ON"
    "-DOT_DHCP6_CLIENT=ON"
    "-DOT_DNS_CLIENT=ON"
    "-DOT_DUA=ON"
    "-DOT_ECDSA=ON"
    "-DOT_JOINER=ON"
    "-DOT_MLR=ON"
    "-DOT_LINK_METRICS_SUBJECT=ON"
    "-DOT_LOG_LEVEL=CRIT"
    "-DOT_PLATFORM=external"
    "-DOT_RCP=OFF"
    "-DOT_SLAAC=ON"
    "-DOT_SRP_CLIENT=ON"
    "-DOT_THREAD_VERSION=1.2"
)
readonly OT_OPTIONS

# Keep folder information
if [[ -n ${BASH_SOURCE[0]} ]]; then
    script_path="${BASH_SOURCE[0]}"
else
    script_path="$0"
fi

script_dir="$(dirname "$(realpath "$script_path")")"
repo_dir="$(dirname "$script_dir")"
current_dir=$(pwd)

# Parse input parameters
target_platform=''
target_board=''
cmdline_options=()
if [[ $# == 0 ]]; then
    # Load available platforms
    available_platforms_load

    for target_platform in "${IFX_PLATFORMS[@]}"; do
        # Load available boards for target platform
        available_boards_load "$target_platform"
    done

    die "Please used platform=XXX and board=YYY to specifiy target board or use make all to build all available executables."
elif [[ $1 == "all" ]]; then # Build all supported platforms with all supported boards
    # Parse command line options
    shift
    cmdline_options+=("$@")

    # Load available platforms
    available_platforms_load

    for target_platform in "${IFX_PLATFORMS[@]}"; do
        # Load available boards for target platform
        available_boards_load "$target_platform"

        for target_board in "${IFX_BOARDS[@]}"; do
            main "$target_platform" "$target_board" "${cmdline_options[@]}"
        done
    done
else
    # Build specified platform with specified board
    sub_string_platform="platform="
    sub_string_board="board="
    for param in "$@"; do
        if [[ $param == "$sub_string_platform"* ]]; then
            target_platform=${param##"$sub_string_platform"}
        elif [[ $param == "$sub_string_board"* ]]; then
            target_board=${param##"$sub_string_board"}
        else
            cmdline_options+=("$param")
        fi
    done

    # Check if target platform has been assigned
    if [ -z "$target_platform" ]; then
        die "target platform has not been assigned"
    fi

    # Load available platforms
    available_platforms_load

    # Check if the target platform is available
    echo "${IFX_PLATFORMS[@]}" | grep -wq "$target_platform" || die "Unsupported platform $target_platform"

    # Check if target board has been assigned
    if [ -z "$target_board" ]; then
        die "target board has not been assigned"
    fi

    # Load available boards for target platform
    available_boards_load $target_platform

    # Check if the target board is available
    echo "${IFX_BOARDS[@]}" | grep -wq "${target_board}" || die "Unsupported board $target_board for $target_platform"

    main "$target_platform" "$target_board" "${cmdline_options[@]}"
fi
